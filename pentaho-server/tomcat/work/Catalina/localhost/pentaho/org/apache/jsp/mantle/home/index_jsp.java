/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.0.43
 * Generated at: 2019-09-24 11:11:41 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.mantle.home;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import org.pentaho.platform.api.engine.IAuthorizationPolicy;
import org.pentaho.platform.api.engine.IPluginManager;
import org.pentaho.platform.engine.core.system.PentahoSessionHolder;
import org.pentaho.platform.engine.core.system.PentahoSystem;
import org.pentaho.platform.security.policy.rolebased.actions.AdministerSecurityAction;
import org.pentaho.platform.security.policy.rolebased.actions.RepositoryReadAction;
import org.pentaho.platform.security.policy.rolebased.actions.RepositoryCreateAction;
import java.util.List;
import java.util.Locale;
import javax.servlet.http.HttpServletRequest;

public final class index_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("org.pentaho.platform.security.policy.rolebased.actions.RepositoryCreateAction");
    _jspx_imports_classes.add("org.pentaho.platform.security.policy.rolebased.actions.AdministerSecurityAction");
    _jspx_imports_classes.add("java.util.List");
    _jspx_imports_classes.add("javax.servlet.http.HttpServletRequest");
    _jspx_imports_classes.add("org.pentaho.platform.api.engine.IAuthorizationPolicy");
    _jspx_imports_classes.add("java.util.Locale");
    _jspx_imports_classes.add("org.pentaho.platform.api.engine.IPluginManager");
    _jspx_imports_classes.add("org.pentaho.platform.security.policy.rolebased.actions.RepositoryReadAction");
    _jspx_imports_classes.add("org.pentaho.platform.engine.core.system.PentahoSystem");
    _jspx_imports_classes.add("org.pentaho.platform.engine.core.system.PentahoSessionHolder");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

final java.lang.String _jspx_method = request.getMethod();
if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
return;
}

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");

    boolean canReadContent = PentahoSystem.get(IAuthorizationPolicy.class, PentahoSessionHolder.getSession())
            .isAllowed(RepositoryReadAction.NAME);
    boolean canCreateContent = PentahoSystem.get(IAuthorizationPolicy.class, PentahoSessionHolder.getSession())
            .isAllowed(RepositoryCreateAction.NAME);
    boolean canAdminister = PentahoSystem.get(IAuthorizationPolicy.class, PentahoSessionHolder.getSession())
            .isAllowed(AdministerSecurityAction.NAME);
    List<String> pluginIds =
            PentahoSystem.get(IPluginManager.class, PentahoSessionHolder.getSession()).getRegisteredPlugins();
//    Locale locale = request.getLocale();

      out.write("\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("    <title>Home Page</title>\r\n");
      out.write("    <meta http-equiv=\"Content-Type\" content=\"text/html;charset=UTF-8\"/>\r\n");
      out.write("    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n");
      out.write("    ");
      out.write("\r\n");
      out.write("\r\n");
      out.write("    <!-- Le styles -->\r\n");
      out.write("    <link href=\"css/home.css\" rel=\"stylesheet\">\r\n");
      out.write("\r\n");
      out.write("    <!-- We need web context for requirejs and css -->\r\n");
      out.write("    <script type=\"text/javascript\" src=\"webcontext.js?context=mantle&cssOnly=true\"></script>\r\n");
      out.write("    ");

        // For consistency, we're using the same method as PentahoWebContextFilter to get scheme
        if (PentahoSystem.getApplicationContext().getFullyQualifiedServerURL().toLowerCase().startsWith("https:")) {
    
      out.write("\r\n");
      out.write("    <script language='JavaScript' type='text/javascript'\r\n");
      out.write("            src='https://sadmin.brightcove.com/js/BrightcoveExperiences.js'></script>\r\n");
      out.write("    ");
 } else { 
      out.write("\r\n");
      out.write("    <script language='JavaScript' type='text/javascript'\r\n");
      out.write("            src='http://admin.brightcove.com/js/BrightcoveExperiences.js'></script>\r\n");
      out.write("    ");
 } 
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("    <!-- Avoid 'console' errors in browsers that lack a console. -->\r\n");
      out.write("    <script type=\"text/javascript\">\r\n");
      out.write("        // if(!( window.console && console.log )){\r\n");
      out.write("        //   ( function(){\r\n");
      out.write("        //     let noop = function(){\r\n");
      out.write("        //     };\r\n");
      out.write("        //     let methods = [ 'assert', 'debug', 'error', 'info', 'log', 'trace', 'warn' ];\r\n");
      out.write("        //     let length = methods.length;\r\n");
      out.write("        //     let console = window.console = {};\r\n");
      out.write("        //     while( length-- ){\r\n");
      out.write("        //       console[ methods[ length ] ] = noop;\r\n");
      out.write("        //     }\r\n");
      out.write("        //   }() );\r\n");
      out.write("        // }\r\n");
      out.write("    </script>\r\n");
      out.write("\r\n");
      out.write("    <!-- Require Home -->\r\n");
      out.write("    <script type=\"text/javascript\">\r\n");
      out.write("        let Home = null;\r\n");
      out.write("        require( [ \"home/home\",\r\n");
      out.write("            \"common-ui/util/ContextProvider\" ], function ( pentahoHome, ContextProvider ) {\r\n");
      out.write("            Home = pentahoHome;\r\n");
      out.write("\r\n");
      out.write("            // Define properties for loading context\r\n");
      out.write("            let contextConfig = [\r\n");
      out.write("                {\r\n");
      out.write("                    path: \"properties/config\",\r\n");
      out.write("                    post: function ( context, loadedMap ) {\r\n");
      out.write("                        context.config = loadedMap;\r\n");
      out.write("                    }\r\n");
      out.write("                },\r\n");
      out.write("                {\r\n");
      out.write("                    path: \"properties/messages\",\r\n");
      out.write("                    post: function ( context, loadedMap ) {\r\n");
      out.write("                        context.i18n = loadedMap;\r\n");
      out.write("                    }\r\n");
      out.write("                } ];\r\n");
      out.write("\r\n");
      out.write("            // Define permissions\r\n");
      out.write("            ContextProvider.addProperty( \"canReadContent\", ");
      out.print(canReadContent);
      out.write(" );\r\n");
      out.write("            ContextProvider.addProperty( \"canCreateContent\", ");
      out.print(canCreateContent);
      out.write(" );\r\n");
      out.write("            ContextProvider.addProperty( \"canAdminister\", ");
      out.print(canAdminister);
      out.write(" );\r\n");
      out.write("            ContextProvider.addProperty( \"hasAnalyzerPlugin\", ");
      out.print(pluginIds.contains("analyzer"));
      out.write(" );\r\n");
      out.write("            ContextProvider.addProperty( \"hasIRPlugin\", ");
      out.print(pluginIds.contains("pentaho-interactive-reporting"));
      out.write(" );\r\n");
      out.write("            ContextProvider.addProperty( \"hasDashBoardsPlugin\", ");
      out.print(pluginIds.contains("dashboards"));
      out.write(" );\r\n");
      out.write("            ContextProvider.addProperty( \"hasMarketplacePlugin\", ");
      out.print(pluginIds.contains("marketplace"));
      out.write(" );\r\n");
      out.write("            ContextProvider.addProperty( \"hasDataAccess\", false ); // default\r\n");
      out.write("\r\n");
      out.write("            // BISERVER-8631 - Manage datasources only available to roles/users with appropriate permissions\r\n");
      out.write("            let serviceUrl = Home.getUrlBase() + \"plugin/data-access/api/permissions/hasDataAccess\";\r\n");
      out.write("            Home.getContent( serviceUrl, function ( result ) {\r\n");
      out.write("                ContextProvider.addProperty( \"hasDataAccess\", result );\r\n");
      out.write("                ContextProvider.get( Home.init, contextConfig ); // initialize\r\n");
      out.write("            }, function ( error ) {\r\n");
      out.write("                console.log( error );\r\n");
      out.write("                ContextProvider.get( Home.init, contextConfig ); // log error and initialize anyway\r\n");
      out.write("            } );\r\n");
      out.write("\r\n");
      out.write("        } );\r\n");
      out.write("    </script>\r\n");
      out.write("</head>\r\n");
      out.write("\r\n");
      out.write("<body data-spy=\"scroll\" data-target=\".sidebar\">\r\n");
      out.write("\r\n");
      out.write("<div class=\"container-fluid main-container\">\r\n");
      out.write("    <div class=\"new\" id=\"newMainPage\"></div>\r\n");
      out.write("    <script type=\"text/x-handlebars-template\"></script>\r\n");
      out.write("    <script id=\"favoritesTemplate\" type=\"text/x-handlebars-template\"></script>\r\n");
      out.write("    <script id=\"recentsTemplate\" type=\"text/x-handlebars-template\" delayCompile=\"true\"></script>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("    ");
      out.write("\r\n");
      out.write("    ");
      out.write("\r\n");
      out.write("    ");
      out.write("\r\n");
      out.write("    ");
      out.write("\r\n");
      out.write("    ");
      out.write("\r\n");
      out.write("    ");
      out.write("\r\n");
      out.write("    ");
      out.write("\r\n");
      out.write("    ");
      out.write("\r\n");
      out.write("    ");
      out.write("\r\n");
      out.write("\r\n");
      out.write("    ");
      out.write("\r\n");
      out.write("\r\n");
      out.write("    ");
      out.write("\r\n");
      out.write("    ");
      out.write("\r\n");
      out.write("    ");
      out.write("\r\n");
      out.write("    ");
      out.write("\r\n");
      out.write("    ");
      out.write("\r\n");
      out.write("    ");
      out.write("\r\n");
      out.write("    ");
      out.write("\r\n");
      out.write("\r\n");
      out.write("    ");
      out.write("\r\n");
      out.write("    ");
      out.write("\r\n");
      out.write("    ");
      out.write("\r\n");
      out.write("    ");
      out.write("\r\n");
      out.write("    ");
      out.write("\r\n");
      out.write("    ");
      out.write("\r\n");
      out.write("\r\n");
      out.write("    ");
      out.write("\r\n");
      out.write("    ");
      out.write("\r\n");
      out.write("    ");
      out.write("\r\n");
      out.write("    ");
      out.write("\r\n");
      out.write("\r\n");
      out.write("    ");
      out.write("\r\n");
      out.write("    ");
      out.write("\r\n");
      out.write("\r\n");
      out.write("    ");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("    ");
      out.write("\r\n");
      out.write("    ");
      out.write("\r\n");
      out.write("    ");
      out.write("\r\n");
      out.write("    ");
      out.write("\r\n");
      out.write("    ");
      out.write("\r\n");
      out.write("    ");
      out.write("\r\n");
      out.write("    ");
      out.write("\r\n");
      out.write("\r\n");
      out.write("    ");
      out.write("\r\n");
      out.write("    ");
      out.write("\r\n");
      out.write("    ");
      out.write("\r\n");
      out.write("    ");
      out.write("\r\n");
      out.write("    ");
      out.write("\r\n");
      out.write("    ");
      out.write("\r\n");
      out.write("    ");
      out.write("\r\n");
      out.write("    ");
      out.write("\r\n");
      out.write("    ");
      out.write("\r\n");
      out.write("    ");
      out.write("\r\n");
      out.write("    ");
      out.write("\r\n");
      out.write("    ");
      out.write("\r\n");
      out.write("    ");
      out.write("\r\n");
      out.write("    ");
      out.write("\r\n");
      out.write("    ");
      out.write("\r\n");
      out.write("    ");
      out.write("\r\n");
      out.write("    ");
      out.write("\r\n");
      out.write("    ");
      out.write("\r\n");
      out.write("    ");
      out.write("\r\n");
      out.write("    ");
      out.write("\r\n");
      out.write("    ");
      out.write("\r\n");
      out.write("    ");
      out.write("\r\n");
      out.write("    ");
      out.write("\r\n");
      out.write("    ");
      out.write("\r\n");
      out.write("    ");
      out.write("\r\n");
      out.write("    ");
      out.write("\r\n");
      out.write("    ");
      out.write("\r\n");
      out.write("    ");
      out.write("\r\n");
      out.write("    ");
      out.write("\r\n");
      out.write("    ");
      out.write("\r\n");
      out.write("    ");
      out.write("\r\n");
      out.write("    ");
      out.write("\r\n");
      out.write("    ");
      out.write("\r\n");
      out.write("    ");
      out.write("\r\n");
      out.write("    ");
      out.write("\r\n");
      out.write("    ");
      out.write("\r\n");
      out.write("    ");
      out.write("\r\n");
      out.write("    ");
      out.write("\r\n");
      out.write("    ");
      out.write("\r\n");
      out.write("    ");
      out.write("\r\n");
      out.write("    ");
      out.write("\r\n");
      out.write("    ");
      out.write("\r\n");
      out.write("    ");
      out.write("\r\n");
      out.write("    ");
      out.write("\r\n");
      out.write("    ");
      out.write("\r\n");
      out.write("    ");
      out.write("\r\n");
      out.write("    ");
      out.write("\r\n");
      out.write("    ");
      out.write("\r\n");
      out.write("    ");
      out.write("\r\n");
      out.write("    ");
      out.write("\r\n");
      out.write("    ");
      out.write("\r\n");
      out.write("    ");
      out.write("\r\n");
      out.write("    ");
      out.write("\r\n");
      out.write("    ");
      out.write("\r\n");
      out.write("    ");
      out.write("\r\n");
      out.write("    ");
      out.write("\r\n");
      out.write("\r\n");
      out.write("    ");
      out.write("\r\n");
      out.write("    ");
      out.write("\r\n");
      out.write("    ");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("    ");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("    ");
      out.write("\r\n");
      out.write("    ");
      out.write("\r\n");
      out.write("    ");
      out.write("\r\n");
      out.write("    ");
      out.write("\r\n");
      out.write("    ");
      out.write("\r\n");
      out.write("    ");
      out.write("\r\n");
      out.write("\r\n");
      out.write("    ");
      out.write("\r\n");
      out.write("    ");
      out.write("\r\n");
      out.write("    ");
      out.write("\r\n");
      out.write("    ");
      out.write("\r\n");
      out.write("    ");
      out.write("\r\n");
      out.write("    ");
      out.write("\r\n");
      out.write("    ");
      out.write("\r\n");
      out.write("    ");
      out.write("\r\n");
      out.write("    ");
      out.write("\r\n");
      out.write("    ");
      out.write("\r\n");
      out.write("    ");
      out.write("\r\n");
      out.write("    ");
      out.write("\r\n");
      out.write("    ");
      out.write("\r\n");
      out.write("    ");
      out.write("\r\n");
      out.write("    ");
      out.write("\r\n");
      out.write("    ");
      out.write("\r\n");
      out.write("    ");
      out.write("\r\n");
      out.write("    ");
      out.write("\r\n");
      out.write("    ");
      out.write("\r\n");
      out.write("    ");
      out.write("\r\n");
      out.write("    ");
      out.write("\r\n");
      out.write("    ");
      out.write("\r\n");
      out.write("    ");
      out.write("\r\n");
      out.write("    ");
      out.write("\r\n");
      out.write("    ");
      out.write("\r\n");
      out.write("    ");
      out.write("\r\n");
      out.write("    ");
      out.write("\r\n");
      out.write("    ");
      out.write("\r\n");
      out.write("    ");
      out.write("\r\n");
      out.write("    ");
      out.write("\r\n");
      out.write("    ");
      out.write("\r\n");
      out.write("    ");
      out.write("\r\n");
      out.write("    ");
      out.write("\r\n");
      out.write("    ");
      out.write("\r\n");
      out.write("    ");
      out.write("\r\n");
      out.write("    ");
      out.write("\r\n");
      out.write("    ");
      out.write("\r\n");
      out.write("    ");
      out.write("\r\n");
      out.write("    ");
      out.write("\r\n");
      out.write("    ");
      out.write("\r\n");
      out.write("    ");
      out.write("\r\n");
      out.write("    ");
      out.write("\r\n");
      out.write("\r\n");
      out.write("    ");
      out.write("\r\n");
      out.write("\r\n");
      out.write("    ");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("    ");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("    ");
      out.write("\r\n");
      out.write("    ");
      out.write("\r\n");
      out.write("\r\n");
      out.write("    ");
      out.write("\r\n");
      out.write("\r\n");
      out.write("    ");
      out.write("\r\n");
      out.write("\r\n");
      out.write("    ");
      out.write("\r\n");
      out.write("\r\n");
      out.write("    ");
      out.write("\r\n");
      out.write("    ");
      out.write("\r\n");
      out.write("\r\n");
      out.write("</div>\r\n");
      out.write("\r\n");
      out.write("<div id=\"loader\" class=\"loader hideEl\">\r\n");
      out.write("    Getting statuses\r\n");
      out.write("</div>\r\n");
      out.write("<button id=\"refreshBtn\" class=\"refreshBtn hideEl\">\r\n");
      out.write("    Refresh\r\n");
      out.write("</button>\r\n");
      out.write("\r\n");
      out.write("<script charset=\"UTF-8\" type=\"text/javascript\">\r\n");
      out.write("    let tileArr = [];\r\n");
      out.write("    let fullNameArray = [];\r\n");
      out.write("    let fullNameObj = {};\r\n");
      out.write("    let matchedRequestCount = 0;\r\n");
      out.write("    let factCount = 0;\r\n");
      out.write("    let popup_init = false;\r\n");
      out.write("    let refreshBtn = document.getElementById( 'refreshBtn' );\r\n");
      out.write("    refreshBtn.addEventListener( 'click', refresh );\r\n");
      out.write("    let btnText = 'Refresh';\r\n");
      out.write("    let loaderText = 'Please wait...';\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("    function preCreatePopover() {\r\n");
      out.write("        if ( !popup_init ) {\r\n");
      out.write("            let tmp = $.fn.popover.Constructor.prototype.show;\r\n");
      out.write("            $.fn.popover.Constructor.prototype.show = function () {\r\n");
      out.write("                tmp.call( this );\r\n");
      out.write("\r\n");
      out.write("                //Keep the popover from running off the screen\r\n");
      out.write("                let offset = 5;\r\n");
      out.write("                let top = this.$element.offset().top;\r\n");
      out.write("                let height = this.$element.outerHeight();\r\n");
      out.write("                let topOffset = top - offset;\r\n");
      out.write("                $( '.popover' ).css( 'top', topOffset + \"px\" );\r\n");
      out.write("                $( '.arrow' ).css( 'top', offset + height / 2 );\r\n");
      out.write("\r\n");
      out.write("                if ( !$( '.popover-title' ).html() )\r\n");
      out.write("                    $( '.popover-title' ).hide();\r\n");
      out.write("            };\r\n");
      out.write("            popup_init = true;\r\n");
      out.write("        }\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("    let settings = {\r\n");
      out.write("        url: FULL_QUALIFIED_URL + 'web-inf/web.xml',\r\n");
      out.write("        responseType: ''\r\n");
      out.write("    };\r\n");
      out.write("    getData( settings ).then(\r\n");
      out.write("        response => {\r\n");
      out.write("            console.dir(response);\r\n");
      out.write("        },\r\n");
      out.write("        error => console.dir( error )\r\n");
      out.write("    );\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("    function getLandingConfig() {\r\n");
      out.write("        let settings = {\r\n");
      out.write("            url: FULL_QUALIFIED_URL + 'landing-config.xml',\r\n");
      out.write("            responseType: ''\r\n");
      out.write("        };\r\n");
      out.write("        getData( settings ).then(\r\n");
      out.write("            response => {\r\n");
      out.write("                try {\r\n");
      out.write("                    let parser = new DOMParser();\r\n");
      out.write("                    let xmlDoc = parser.parseFromString( response, \"application/xml\" );\r\n");
      out.write("                    let node = xmlDoc.getElementsByTagName( \"landing-url\" ) && xmlDoc.getElementsByTagName( \"landing-url\" ) [ 0 ];\r\n");
      out.write("                    if ( node && node.getAttribute( \"base-url\" ) ) {\r\n");
      out.write("                        btnText = node.getAttribute( \"btn-text\" );\r\n");
      out.write("                        loaderText = node.getAttribute( \"loader-text\" );\r\n");
      out.write("                        let btn = document.getElementById( 'refreshBtn' );\r\n");
      out.write("                        let loader = document.getElementById( 'loader' );\r\n");
      out.write("\r\n");
      out.write("                        btn && ( btn.textContent = btnText );\r\n");
      out.write("                        loader && ( loader.textContent = loaderText );\r\n");
      out.write("                        let url = node.getAttribute( \"base-url\" ) + node.getAttribute( \"path\" );\r\n");
      out.write("                        loadCompleted( url );\r\n");
      out.write("                    } else {\r\n");
      out.write("                        console.log( \"check Landing Page rest api url\" );\r\n");
      out.write("                    }\r\n");
      out.write("\r\n");
      out.write("                } catch (e) {\r\n");
      out.write("                    console.log( e );\r\n");
      out.write("                }\r\n");
      out.write("            },\r\n");
      out.write("            error => console.dir( error )\r\n");
      out.write("        );\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    function getData( settings ) {\r\n");
      out.write("        const url = settings.url || '';\r\n");
      out.write("        const method = settings.method || 'GET';\r\n");
      out.write("        let responseType = settings.responseType !== undefined ? settings.responseType : 'json';\r\n");
      out.write("        const data = settings.data instanceof FormData ? settings.data : settings.data ? JSON.stringify( settings.data ) : null;\r\n");
      out.write("        const contentType = settings.contentType || null;\r\n");
      out.write("        let loader = document.getElementById( \"loader\" );\r\n");
      out.write("        if ( document.getElementsByClassName( \"main-container\" )[ 0 ] instanceof HTMLElement ) {\r\n");
      out.write("            loader.style.height = \"100%\";\r\n");
      out.write("        }\r\n");
      out.write("        loader && ( loader.classList.remove( \"hideEl\" ) );\r\n");
      out.write("        return new Promise( function ( resolve, reject ) {\r\n");
      out.write("            let xhr = new XMLHttpRequest();\r\n");
      out.write("            xhr.responseType = responseType;\r\n");
      out.write("            xhr.open( method, url, true );\r\n");
      out.write("            contentType && xhr.setRequestHeader( \"Content-Type\", contentType );\r\n");
      out.write("            xhr.overrideMimeType( 'text/xml' );\r\n");
      out.write("            xhr.onload = function () {\r\n");
      out.write("                if ( this.status === 200 ) {\r\n");
      out.write("                    loader && ( loader.classList.add( \"hideEl\" ) );\r\n");
      out.write("                    resolve( this.response );\r\n");
      out.write("                } else {\r\n");
      out.write("                    reject( this );\r\n");
      out.write("                    loader && ( loader.classList.add( \"hideEl\" ) );\r\n");
      out.write("                }\r\n");
      out.write("            };\r\n");
      out.write("            xhr.onerror = function ( err ) {\r\n");
      out.write("                loader && ( loader.classList.add( \"hideEl\" ) );\r\n");
      out.write("                reject( err );\r\n");
      out.write("            };\r\n");
      out.write("            xhr.send( data );\r\n");
      out.write("        } );\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    function refresh() {\r\n");
      out.write("        let content = document.getElementById( 'newMainPage' );\r\n");
      out.write("        content && ( content.innerHTML = \"\" );\r\n");
      out.write("        tileArr = [];\r\n");
      out.write("        fullNameArray = [];\r\n");
      out.write("        matchedRequestCount = 0;\r\n");
      out.write("        factCount = 0;\r\n");
      out.write("        let settings = {\r\n");
      out.write("            url: FULL_QUALIFIED_URL + 'api/repo/files/%3A/tree?depth=-1&showHidden=false&filter=*%7CFOLDERS',\r\n");
      out.write("            responseType: ''\r\n");
      out.write("        };\r\n");
      out.write("        getData( settings )\r\n");
      out.write("            .then(\r\n");
      out.write("                response => {\r\n");
      out.write("                    try {\r\n");
      out.write("                        let parser = new DOMParser();\r\n");
      out.write("                        let xmlDoc = parser.parseFromString( response, \"application/xml\" );\r\n");
      out.write("                        let page = document.getElementById( 'newMainPage' );\r\n");
      out.write("                        if ( page ) {\r\n");
      out.write("                            let tags = xmlDoc.getElementsByTagName( \"file\" );\r\n");
      out.write("                            let fLength = tags.length;\r\n");
      out.write("                            for (let i = 0; i < fLength; i++) {\r\n");
      out.write("                                //console.log(tags[ i ].getElementsByTagName( 'path' )[ 0 ].innerHTML);\r\n");
      out.write("                                let pathToReport = tags[ i ].getElementsByTagName( 'path' ) && tags[ i ].getElementsByTagName( 'path' )[ 0 ].innerHTML;\r\n");
      out.write("                                if ( pathToReport.indexOf( '/home/reports/' ) > -1 ) {\r\n");
      out.write("                                    let tile = createTile( pathToReport );\r\n");
      out.write("                                    tile.addEventListener( 'click', openRepositoryFile );\r\n");
      out.write("                                    page.appendChild( tile );\r\n");
      out.write("                                    matchedRequestCount++;\r\n");
      out.write("                                    tileArr.push( pathToReport );\r\n");
      out.write("                                }\r\n");
      out.write("                            }\r\n");
      out.write("                            if ( tileArr.length > 0 ) {\r\n");
      out.write("                                createRealTailData( tileArr );\r\n");
      out.write("                            } else {\r\n");
      out.write("                                //toDO no data case\r\n");
      out.write("\r\n");
      out.write("                            }\r\n");
      out.write("                        }\r\n");
      out.write("                    } catch (e) {\r\n");
      out.write("                        console.log( e );\r\n");
      out.write("                    }\r\n");
      out.write("                },\r\n");
      out.write("                error => console.log( error )\r\n");
      out.write("            );\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    refresh();\r\n");
      out.write("\r\n");
      out.write("    function createTile( path ) {\r\n");
      out.write("        let tile = document.createElement( 'div' );\r\n");
      out.write("        tile.classList.add( 'mainBlock' );\r\n");
      out.write("        tile.setAttribute( 'path', path );\r\n");
      out.write("        tile.setAttribute( 'title', path );\r\n");
      out.write("        let tileContent = document.createElement( 'div' );\r\n");
      out.write("        tileContent.classList.add( 'tileContent' );\r\n");
      out.write("\r\n");
      out.write("        let reportStatus = document.createElement( 'div' );\r\n");
      out.write("        reportStatus.classList.add( 'reportStatus' );\r\n");
      out.write("\r\n");
      out.write("        let reportName = document.createElement( 'div' );\r\n");
      out.write("        reportName.classList.add( 'tileName' );\r\n");
      out.write("\r\n");
      out.write("        let reportDate = document.createElement( 'div' );\r\n");
      out.write("        let reportTime = document.createElement( 'div' );\r\n");
      out.write("        reportDate.classList.add( 'tileData' );\r\n");
      out.write("        reportTime.classList.add( 'tileTime' );\r\n");
      out.write("        tileContent.appendChild( reportStatus );\r\n");
      out.write("        tileContent.appendChild( reportName );\r\n");
      out.write("        tileContent.appendChild( reportDate );\r\n");
      out.write("        tileContent.appendChild( reportTime );\r\n");
      out.write("        tile.appendChild( tileContent );\r\n");
      out.write("        tile.style.display = 'none';\r\n");
      out.write("        return tile;\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("    function createRealTailData( tileArr ) {\r\n");
      out.write("        for (let i = 0; i < tileArr.length; i++) {\r\n");
      out.write("            let encRep = encodeRepositoryPath( tileArr[ i ] );\r\n");
      out.write("            let encodePeth = encodePathComponents( encRep );\r\n");
      out.write("            let request = CONTEXT_PATH + \"api/repo/files/\" + encodePeth + \"/children?showHidden=false&filter=*%7CFILES\";\r\n");
      out.write("            $.ajax( {\r\n");
      out.write("                async: true,\r\n");
      out.write("                cache: false, // prevent IE from caching the request\r\n");
      out.write("                dataType: \"json\",\r\n");
      out.write("                url: request,\r\n");
      out.write("                success: function ( response ) {\r\n");
      out.write("                    if ( response ) {\r\n");
      out.write("                        let repositoryFileDto = response[ \"repositoryFileDto\" ] || null;\r\n");
      out.write("                        if ( repositoryFileDto ) {\r\n");
      out.write("                            let resultArray = [];\r\n");
      out.write("                            let wcdfCount = 0;\r\n");
      out.write("                            for (let i = 0; i < repositoryFileDto.length; i++) {\r\n");
      out.write("                                let reportData = repositoryFileDto[ i ];\r\n");
      out.write("                                if ( reportData[ \"path\" ].endsWith( '.prpt' ) || reportData[ \"path\" ].endsWith( '.wcdf' ) ) {\r\n");
      out.write("                                    if ( resultArray.length === 0 ) {\r\n");
      out.write("                                        resultArray.push( reportData );\r\n");
      out.write("                                        if ( reportData[ \"path\" ].endsWith( '.wcdf' ) ) {\r\n");
      out.write("                                            wcdfCount++;\r\n");
      out.write("                                        }\r\n");
      out.write("                                    } else {\r\n");
      out.write("                                        let pathAlreadyExist = false;\r\n");
      out.write("                                        let wcdfAlreadyExist = false;\r\n");
      out.write("                                        for (let i = 0; i < resultArray.length; i++) {\r\n");
      out.write("                                            if ( reportData[ \"path\" ] === resultArray[ i ][ \"path\" ] ) {\r\n");
      out.write("                                                pathAlreadyExist = true;\r\n");
      out.write("                                                break;\r\n");
      out.write("                                            }\r\n");
      out.write("                                            if ( reportData[ \"path\" ].endsWith( '.wcdf' ) ) {\r\n");
      out.write("                                                if ( ++wcdfCount > 1 ) {\r\n");
      out.write("                                                    break;\r\n");
      out.write("                                                }\r\n");
      out.write("                                            }\r\n");
      out.write("                                        }\r\n");
      out.write("                                        if ( !pathAlreadyExist && !wcdfAlreadyExist ) {\r\n");
      out.write("                                            resultArray.push( reportData );\r\n");
      out.write("                                        }\r\n");
      out.write("                                    }\r\n");
      out.write("                                }\r\n");
      out.write("                            }\r\n");
      out.write("\r\n");
      out.write("                            if ( resultArray.length === 1 ) {\r\n");
      out.write("                                let reportData = resultArray[ 0 ];\r\n");
      out.write("                                let basePath = reportData[ \"path\" ].substring( 0, reportData[ \"path\" ].indexOf( reportData[ \"name\" ] ) - 1 );\r\n");
      out.write("                                let tile = document.querySelector( '[path=\"' + basePath + '\"]' );\r\n");
      out.write("                                if ( tile ) {\r\n");
      out.write("                                    tile.setAttribute( 'path', reportData[ 'path' ] );\r\n");
      out.write("                                    tile.setAttribute( 'title', reportData[ 'path' ] );\r\n");
      out.write("                                    let reportName = reportData[ \"title\" ];\r\n");
      out.write("                                    if ( reportData[ \"title\" ].endsWith( '.prpt' ) || reportData[ \"title\" ].endsWith( '.wcdf' ) ) {\r\n");
      out.write("                                        reportName = reportData[ \"title\" ].substring( 0, reportData[ \"title\" ].length - 5 )\r\n");
      out.write("                                    }\r\n");
      out.write("                                    tile.getElementsByClassName( 'tileName' )[ 0 ].textContent = reportName;\r\n");
      out.write("                                    tile.style.display = 'inline-block';\r\n");
      out.write("                                    fullNameArray.push( reportData[ 'path' ] );\r\n");
      out.write("                                    fullNameObj[ reportData[ 'path' ] ] = reportData[ 'path' ];\r\n");
      out.write("                                }\r\n");
      out.write("                            } else {\r\n");
      out.write("                                let tile = null;\r\n");
      out.write("                                for (let i = 0; i < resultArray.length; i++) {\r\n");
      out.write("                                    let reportData = resultArray[ i ];\r\n");
      out.write("                                    let basePath = reportData[ \"path\" ].substring( 0, reportData[ \"path\" ].indexOf( reportData[ \"name\" ] ) - 1 );\r\n");
      out.write("                                    if ( !tile ) {\r\n");
      out.write("                                        tile = document.querySelector( '[path=\"' + basePath + '\"]' );\r\n");
      out.write("                                    }\r\n");
      out.write("                                    if ( i === 0 ) {\r\n");
      out.write("                                        if ( tile ) {\r\n");
      out.write("                                            tile.setAttribute( 'path', reportData[ 'path' ] );\r\n");
      out.write("                                            tile.setAttribute( 'title', reportData[ 'path' ] );\r\n");
      out.write("                                            let reportName = reportData[ \"title\" ];\r\n");
      out.write("                                            if ( reportData[ \"title\" ].endsWith( '.prpt' ) || reportData[ \"title\" ].endsWith( '.wcdf' ) ) {\r\n");
      out.write("                                                reportName = reportData[ \"title\" ].substring( 0, reportData[ \"title\" ].length - 5 )\r\n");
      out.write("                                            }\r\n");
      out.write("                                            tile.getElementsByClassName( 'tileName' )[ 0 ].textContent = reportName;\r\n");
      out.write("                                            tile.style.display = 'inline-block';\r\n");
      out.write("                                            fullNameArray.push( reportData[ 'path' ] );\r\n");
      out.write("                                            fullNameObj[ reportData[ 'path' ] ] = reportData[ 'path' ];\r\n");
      out.write("                                        }\r\n");
      out.write("                                    } else {\r\n");
      out.write("                                        if ( tile ) {\r\n");
      out.write("                                            let newTile = createTile( basePath + \"/\" + reportData[ \"name\" ] );\r\n");
      out.write("                                            let reportName = reportData[ \"title\" ];\r\n");
      out.write("                                            if ( reportData[ \"title\" ].endsWith( '.prpt' ) || reportData[ \"title\" ].endsWith( '.wcdf' ) ) {\r\n");
      out.write("                                                reportName = reportData[ \"title\" ].substring( 0, reportData[ \"title\" ].length - 5 )\r\n");
      out.write("                                            }\r\n");
      out.write("                                            newTile.getElementsByClassName( 'tileName' )[ 0 ].textContent = reportName;\r\n");
      out.write("                                            let tileParent = tile.parentNode;\r\n");
      out.write("                                            newTile.style.display = 'inline-block';\r\n");
      out.write("                                            fullNameArray.push( reportData[ 'path' ] );\r\n");
      out.write("                                            fullNameObj[ reportData[ 'path' ] ] = reportData[ 'path' ];\r\n");
      out.write("                                            newTile.addEventListener( 'click', openRepositoryFile );\r\n");
      out.write("                                            tileParent.insertBefore( newTile, tile );\r\n");
      out.write("                                        }\r\n");
      out.write("                                    }\r\n");
      out.write("                                }\r\n");
      out.write("                            }\r\n");
      out.write("                        }\r\n");
      out.write("                    }\r\n");
      out.write("                    if ( ++factCount === matchedRequestCount ) {\r\n");
      out.write("                        getLandingConfig();\r\n");
      out.write("                    }\r\n");
      out.write("                },\r\n");
      out.write("                error: function ( response ) {\r\n");
      out.write("                    if ( ++factCount === matchedRequestCount ) {\r\n");
      out.write("                        getLandingConfig();\r\n");
      out.write("                    }\r\n");
      out.write("                    console.log( response )\r\n");
      out.write("                }\r\n");
      out.write("            } )\r\n");
      out.write("        }\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    function xmlToJson( xml ) {\r\n");
      out.write("        try {\r\n");
      out.write("            let obj = {};\r\n");
      out.write("            if ( xml.children.length > 0 ) {\r\n");
      out.write("                for (var i = 0; i < xml.children.length; i++) {\r\n");
      out.write("                    let item = xml.children.item( i );\r\n");
      out.write("                    let nodeName = item.nodeName;\r\n");
      out.write("                    if ( typeof ( obj[ nodeName ] ) === \"undefined\" ) {\r\n");
      out.write("                        obj[ nodeName ] = xmlToJson( item );\r\n");
      out.write("                    } else {\r\n");
      out.write("                        if ( typeof ( obj[ nodeName ].push ) === \"undefined\" ) {\r\n");
      out.write("                            let old = obj[ nodeName ];\r\n");
      out.write("                            obj[ nodeName ] = [];\r\n");
      out.write("                            obj[ nodeName ].push( old );\r\n");
      out.write("                        }\r\n");
      out.write("                        obj[ nodeName ].push( xmlToJson( item ) );\r\n");
      out.write("                    }\r\n");
      out.write("                }\r\n");
      out.write("            } else {\r\n");
      out.write("                obj = xml.textContent;\r\n");
      out.write("            }\r\n");
      out.write("            return obj;\r\n");
      out.write("        } catch (e) {\r\n");
      out.write("            console.log( e.message );\r\n");
      out.write("        }\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("    function loadCompleted( url = 'http://localhost:8090/status/oozie' ) {\r\n");
      out.write("        let settings = {\r\n");
      out.write("            url: url,\r\n");
      out.write("            data: null,\r\n");
      out.write("            method: 'POST',\r\n");
      out.write("        };\r\n");
      out.write("        getData( settings ).then( res => {\r\n");
      out.write("            if(refreshBtn && refreshBtn.classList.contains('hideEl')){\r\n");
      out.write("                refreshBtn.classList.remove('hideEl');\r\n");
      out.write("            }\r\n");
      out.write("            renderStatuses( res )\r\n");
      out.write("        } ).catch( err => {\r\n");
      out.write("            console.dir( 'error', err );\r\n");
      out.write("        } );\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    function renderStatuses( res ) {\r\n");
      out.write("        let foundedTails = 0;\r\n");
      out.write("        let matchName = 0;\r\n");
      out.write("        let sendingReports = fullNameArray || [];\r\n");
      out.write("        let notMappedReport = [];\r\n");
      out.write("        if ( res instanceof Array ) {\r\n");
      out.write("            for (let i = 0; i < sendingReports.length; i++) {\r\n");
      out.write("                let reportExist = false;\r\n");
      out.write("                let currentReport = sendingReports[ i ];\r\n");
      out.write("                for (let j = 0; j < res.length; j++) {\r\n");
      out.write("                    if ( res[ j ][ \"reportName\" ] === currentReport ) {\r\n");
      out.write("                        reportExist = true;\r\n");
      out.write("                        matchName++;\r\n");
      out.write("\r\n");
      out.write("                        break\r\n");
      out.write("                    }\r\n");
      out.write("                }\r\n");
      out.write("                if ( !reportExist ) {\r\n");
      out.write("                    notMappedReport.push( currentReport )\r\n");
      out.write("                }\r\n");
      out.write("            }\r\n");
      out.write("        }\r\n");
      out.write("        if ( notMappedReport.length ) {\r\n");
      out.write("            console.log( 'not mapped report' );\r\n");
      out.write("            console.dir( notMappedReport );\r\n");
      out.write("        }\r\n");
      out.write("        for (let i = 0; i < res.length; i++) {\r\n");
      out.write("            if ( res[ i ][ \"reportName\" ] ) {\r\n");
      out.write("                let selector = \"[path='\" + res[ i ][ \"reportName\" ] + \"']\";\r\n");
      out.write("                let tail = document.querySelector( selector );\r\n");
      out.write("                if ( tail ) {\r\n");
      out.write("                    if ( res[ i ][ \"jobStatusPentahoApi\" ] && res[ i ][ \"jobStatusPentahoApi\" ][ \"status\" ] ) {\r\n");
      out.write("                        let status = res[ i ][ \"jobStatusPentahoApi\" ][ \"status\" ] && res[ i ][ \"jobStatusPentahoApi\" ][ \"status\" ].toLowerCase();\r\n");
      out.write("                        status && setPicture( tail, status );\r\n");
      out.write("                        let lastUpdate = res[ i ][ \"jobStatusPentahoApi\" ][ \"endTime\" ] || null;\r\n");
      out.write("                        if ( status === \"succeeded\" || status === \"running\" || status === \"fail\" ) {\r\n");
      out.write("                            if ( lastUpdate ) {\r\n");
      out.write("                                tail.getElementsByClassName( \"tileData\" )[ 0 ].textContent = res[ i ][ \"reportMessage\" ] + \": \";\r\n");
      out.write("                                tail.getElementsByClassName( \"tileTime\" )[ 0 ].textContent = formatDate( lastUpdate );\r\n");
      out.write("                            }\r\n");
      out.write("                        } else if ( status === \"not_found\" ) {\r\n");
      out.write("                            tail.getElementsByClassName( \"tileData\" )[ 0 ].textContent = res[ i ][ \"reportMessage\" ];\r\n");
      out.write("                        } else if ( status === \"streaming\" ) {\r\n");
      out.write("                        }\r\n");
      out.write("\r\n");
      out.write("                    }\r\n");
      out.write("                    foundedTails++;\r\n");
      out.write("                }\r\n");
      out.write("            }\r\n");
      out.write("        }\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    function formatDate( t ) {\r\n");
      out.write("        let tm = new Date( t );\r\n");
      out.write("        let formatedTime = '';\r\n");
      out.write("        if ( tm instanceof Date ) {\r\n");
      out.write("            let mT = tm.getTime() + 3 * 60 * 60 * 1000;\r\n");
      out.write("            mT = new Date( mT );\r\n");
      out.write("            let y = mT.getFullYear();\r\n");
      out.write("            let m = pad( mT.getMonth() + 1 );\r\n");
      out.write("            let d = pad( mT.getUTCDate() );\r\n");
      out.write("            let h = pad( mT.getHours() );\r\n");
      out.write("            let min = pad( mT.getMinutes() );\r\n");
      out.write("            let sec = pad( mT.getSeconds() );\r\n");
      out.write("            formatedTime = `${y}/${m}/${d}  ${h}:${min}:${sec}`;\r\n");
      out.write("        } else {\r\n");
      out.write("            formatedTime = t;\r\n");
      out.write("        }\r\n");
      out.write("        return formatedTime;\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    function pad( d ) {\r\n");
      out.write("        return d < 10 ? `0${d}` : `${d}`;\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    function setPicture( el, status ) {\r\n");
      out.write("        let pictDiv = el.getElementsByClassName( \"reportStatus\" )[ 0 ];\r\n");
      out.write("        pictDiv && pictDiv.classList.add( status.toLowerCase() );\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    function encodeRepositoryPath( str ) {\r\n");
      out.write("        \"use strict\";\r\n");
      out.write("        return String( str ).replace( new RegExp( \":\", \"g\" ), \"\\t\" ).replace( new RegExp( \"[\\\\\\\\/]\", \"g\" ), \":\" );\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    function openRepositoryFile( e ) {\r\n");
      out.write("        let path = this.nodeType && this.nodeType === 1 && this.getAttribute( 'path' );\r\n");
      out.write("        let mode = \"run\";\r\n");
      out.write("        if ( !path ) {\r\n");
      out.write("            return;\r\n");
      out.write("        }\r\n");
      out.write("        if ( !mode ) {\r\n");
      out.write("            mode = \"edit\";\r\n");
      out.write("        }\r\n");
      out.write("        let extension = path.split( \".\" ).pop();\r\n");
      out.write("        // force to open pdf files in another window due to issues with pdf readers in IE browsers\r\n");
      out.write("        // via class added on themeResources for IE browsers\r\n");
      out.write("        if ( !( $( \"body\" ).hasClass( \"pdfReaderEmbeded\" ) && extension == \"pdf\" ) ) {\r\n");
      out.write("            window.parent.mantle_setPerspective( 'opened.perspective' );\r\n");
      out.write("        }\r\n");
      out.write("        path && window.parent.mantle_openRepositoryFile( path, mode );\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("    let encodePathComponents = function ( path ) {\r\n");
      out.write("        return encode( \"{0}\", path );\r\n");
      out.write("    };\r\n");
      out.write("    let encode = function ( str, args, queryObj ) {\r\n");
      out.write("        \"use strict\";\r\n");
      out.write("        if ( typeof args === \"undefined\" ) {\r\n");
      out.write("            return str;\r\n");
      out.write("        }\r\n");
      out.write("        if ( typeof args === \"string\" ) {\r\n");
      out.write("            args = [ args ];\r\n");
      out.write("        }\r\n");
      out.write("        // detect the presence of the \"?\" to determin when the special double-slash encoding should end\r\n");
      out.write("        let pathPart = str.split( \"\\?\" )[ 0 ];\r\n");
      out.write("        let pathBounds = ( pathPart.match( /\\{[\\d]+\\}/g ) || [] ).length;\r\n");
      out.write("\r\n");
      out.write("        args = args.map( function ( item, pos ) {\r\n");
      out.write("            let encodedStr = encodeURIComponent( String( item ) )\r\n");
      out.write("            // double-encode / and \\ to work around Tomcat issue\r\n");
      out.write("            if ( pos < pathBounds ) {\r\n");
      out.write("                encodedStr = encodedStr.replace( /%5C/g, \"%255C\" ).replace( /%2F/g, \"%252F\" );\r\n");
      out.write("            }\r\n");
      out.write("            return encodedStr;\r\n");
      out.write("        } );\r\n");
      out.write("        return args;\r\n");
      out.write("    };\r\n");
      out.write("\r\n");
      out.write("</script>\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
